/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.EmployeeController;
import controller.SupplierController;
import dao.EmployeeDAO;
import dao.SupplierDAO;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import model.Employees;
import model.Suppliers;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class EmployeeForm extends javax.swing.JFrame {
    private ThemNVForm themNVForm;  
    private SuaNVForm suaNVForm;
    EmployeeController spController;
    EmployeeDAO employeeDao;
    Employees employee;
    private Map<String, String> mapChucVu;

    /**
     * Creates new form EmployeeForm
     */
    public EmployeeForm() throws SQLException {
        initComponents();
        mapChucVu = new HashMap();
        mapChucVu.put("Admin", "1");
        mapChucVu.put("Nhân viên", "2");
        spController = new EmployeeController(this);
        employeeDao = new EmployeeDAO();
        themNVForm = new ThemNVForm(this, true);
        btnThem.addActionListener(spController);
        btnSua.addActionListener(spController);
        btnXoa.addActionListener(spController);      
        btnXuat.addActionListener(spController);  
        themNVForm.getBtnThemNV().addActionListener(spController);
        themNVForm.getBtnHuy().addActionListener(spController);
        
        suaNVForm = new SuaNVForm(this, true);
        suaNVForm.getBtnLuu().addActionListener(spController);
        suaNVForm.getBtnHuy().addActionListener(spController);
        loadEmployee();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnNhap = new javax.swing.JButton();
        btnXuat = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTimKiem = new javax.swing.JTextPane();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDanhSach = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Chức năng\n"));

        btnThem.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\add (1).png")); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnThem.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnThem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnXoa.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\trash (1).png")); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnXoa.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnXoa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnSua.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\edit (1).png")); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSua.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSua.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnNhap.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\excel.png")); // NOI18N
        btnNhap.setText("Nhập Excel");
        btnNhap.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNhap.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnNhap.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnXuat.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\sheets.png")); // NOI18N
        btnXuat.setText("Xuất Excel");
        btnXuat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnXuat.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnXuat.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnNhap)
                .addGap(18, 18, 18)
                .addComponent(btnXuat)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXuat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNhap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnXoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnThem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSua, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm\n"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tên" }));

        jScrollPane1.setViewportView(txtTimKiem);

        jButton6.setIcon(new javax.swing.ImageIcon("D:\\iconJV\\reorder.png")); // NOI18N
        jButton6.setText("Làm mới");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Danh sách nhân viên\n\n"));

        tblDanhSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblDanhSach);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNhap;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuat;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDanhSach;
    private javax.swing.JTextPane txtTimKiem;
    // End of variables declaration//GEN-END:variables

    public void HienthiForm(String action) {
        if("Thêm".equals(action)){
            themNVForm.setLocationRelativeTo(this);
            themNVForm.setVisible(true);
        }else if("Sửa".equals(action)){
            int selectedRow = tblDanhSach.getSelectedRow();
            if(selectedRow >= 0){
                String maNV = tblDanhSach.getValueAt(selectedRow, 0).toString();
               String tenNV = tblDanhSach.getValueAt(selectedRow, 1).toString();
               String pass = tblDanhSach.getValueAt(selectedRow, 2).toString();
               String fullname = tblDanhSach.getValueAt(selectedRow, 3).toString();
               String gt = tblDanhSach.getValueAt(selectedRow, 4).toString();
               String role = tblDanhSach.getValueAt(selectedRow, 5).toString();
               String sdt = tblDanhSach.getValueAt(selectedRow, 6).toString();
               String email = tblDanhSach.getValueAt(selectedRow, 7).toString();
               Date ngayThem = (Date) tblDanhSach.getValueAt(selectedRow, 8);
               Employees sp = new Employees(Integer.parseInt(maNV), tenNV,pass,fullname,gt,Integer.parseInt(mapChucVu.get(role)),sdt, email, ngayThem);
               suaNVForm.setValue(sp);
               suaNVForm.setLocationRelativeTo(this);
               suaNVForm.setVisible(true);
               }           
        }else if("Xóa".equals(action)){
            int selectedRow = tblDanhSach.getSelectedRow();
            if(selectedRow >=0){
               String maNV = tblDanhSach.getValueAt(selectedRow, 0).toString();
               String tenNV = tblDanhSach.getValueAt(selectedRow, 1).toString();
               String pass = tblDanhSach.getValueAt(selectedRow, 2).toString();
               String fullname = tblDanhSach.getValueAt(selectedRow, 3).toString();
               String gt = tblDanhSach.getValueAt(selectedRow, 4).toString();
               String role = tblDanhSach.getValueAt(selectedRow, 5).toString();
               String sdt = tblDanhSach.getValueAt(selectedRow, 6).toString();
               String email = tblDanhSach.getValueAt(selectedRow, 7).toString();
               Date ngayThem = (Date) tblDanhSach.getValueAt(selectedRow, 8);
               Employees sp = new Employees(Integer.parseInt(maNV), tenNV,pass,fullname,gt,Integer.parseInt(mapChucVu.get(role)),sdt, email, ngayThem);
                int choise = JOptionPane.showConfirmDialog(null, "Bạn chắc chắn có muốn xóa dữ liệu?", 
                        "Xóa", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(choise == JOptionPane.YES_OPTION){
                    employeeDao.employee_delete(sp);
                    JOptionPane.showMessageDialog(null, "Đã xóa thành công.");
                    loadEmployee();
                }              
                        
            }
        }
    }

    public void AddEmployee() {
        try{
            //gọi hàm getmodel ở form themncc đẻ lấy thông tin vừa nhập
            var employee = themNVForm.getModel();
            // gọi hàm dao   
            employeeDao.employee_insert(employee);
            JOptionPane.showMessageDialog(this, "Thêm thành công");
            loadEmployee();            
        }catch(Exception ex){
            String messages = ex.getMessage();
            var mesErr = convertToStringList(messages);
            String mess = "";
            for (String m : mesErr) {
                mess += m + "\n";
            }
            JOptionPane.showMessageDialog(this, mess, "Lỗi", JOptionPane.ERROR_MESSAGE);
        }   
    }

    public void Huy() {
        themNVForm.setVisible(false);
        suaNVForm.setVisible(false);
    }

    public void UpdateEmployee() {
        try{
            //gọi hàm getmodel ở form themncc đẻ lấy thông tin vừa nhập
            var employee = suaNVForm.getModel();
            // gọi hàm dao   
            employeeDao.employee_update(employee);
            loadEmployee();    
            JOptionPane.showMessageDialog(this, "Sửa thành công");
                   
        }catch(Exception ex){
            String messages = ex.getMessage();
            var mesErr = convertToStringList(messages);
            String mess = "";
            for (String m : mesErr) {
                mess += m + "\n";
            }
            JOptionPane.showMessageDialog(this, mess, "Lỗi", JOptionPane.ERROR_MESSAGE);
        }   
    }

    private void loadEmployee() {
        employee = new Employees();
        employee.setEmployee_name("");
        employeeDao.employeefind(tblDanhSach,employee); 
       
    }

     private List<String> convertToStringList(String suppliersString) {
        // Remove square brackets and split by ", "
        String cleanedString = suppliersString.replaceAll("\\[|\\]", "");
        if (cleanedString.isEmpty()) {
            return new ArrayList<>();
        }
        return new ArrayList<>(Arrays.asList(cleanedString.split(", ")));
    }
    private static CellStyle DinhdangHeader(XSSFSheet sheet) {
           // Create font
           Font font = sheet.getWorkbook().createFont();
           font.setFontName("Times New Roman");
           font.setBold(true);
           font.setFontHeightInPoints((short) 12); // font size
           font.setColor(IndexedColors.WHITE.getIndex()); // text color

           // Create CellStyle
           CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
           cellStyle.setFont(font);
           cellStyle.setAlignment(HorizontalAlignment.CENTER);
           cellStyle.setVerticalAlignment(VerticalAlignment.TOP);
           cellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());
           cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
           cellStyle.setBorderBottom(BorderStyle.THIN);
           cellStyle.setWrapText(true);
           return cellStyle;
       }
    private String mapRoleToName(int roleId) {
    return switch (roleId) {
        case 1 -> "Admin";
        case 2 -> "Nhân viên";
        default -> "Không rõ";
    };
}

public void Xuatbaocao() {
    try {
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Danh sách nhân viên");

        // Style tiêu đề
        CellStyle styleTitle = workbook.createCellStyle();
        Font fontTitle = workbook.createFont();
        fontTitle.setFontHeightInPoints((short) 14);
        fontTitle.setBold(true);
        styleTitle.setFont(fontTitle);
        styleTitle.setAlignment(HorizontalAlignment.CENTER);

        // Style tiêu đề cột
        CellStyle styleHeader = workbook.createCellStyle();
        Font fontHeader = workbook.createFont();
        fontHeader.setBold(true);
        fontHeader.setColor(IndexedColors.WHITE.getIndex());
        styleHeader.setFont(fontHeader);
        styleHeader.setFillForegroundColor(IndexedColors.GREEN.getIndex());
        styleHeader.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        styleHeader.setBorderTop(BorderStyle.THIN);
        styleHeader.setBorderBottom(BorderStyle.THIN);
        styleHeader.setBorderLeft(BorderStyle.THIN);
        styleHeader.setBorderRight(BorderStyle.THIN);
        styleHeader.setAlignment(HorizontalAlignment.CENTER);

        // Style cho dữ liệu
        CellStyle styleCell = workbook.createCellStyle();
        styleCell.setBorderTop(BorderStyle.THIN);
        styleCell.setBorderBottom(BorderStyle.THIN);
        styleCell.setBorderLeft(BorderStyle.THIN);
        styleCell.setBorderRight(BorderStyle.THIN);
        styleCell.setVerticalAlignment(VerticalAlignment.CENTER);
        styleCell.setWrapText(true);

        // Dòng tiêu đề chính
        Row titleRow = sheet.createRow(1);
        Cell titleCell = titleRow.createCell(0);
        titleCell.setCellValue("DANH SÁCH NHÂN VIÊN");
        titleCell.setCellStyle(styleTitle);
        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 9)); // Merge A2:J2

        // Dòng tiêu đề bảng
        Row headerRow = sheet.createRow(3);
        String[] headers = { "STT", "Mã NV", "Tên Đăng Nhập", "Mật Khẩu", "Họ Tên", "Giới Tính", "Chức vụ", "SĐT", "Email", "Ngày" };
        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(styleHeader);
        }

          // Lấy dữ liệu
        String tenNV = txtTimKiem.getText().trim();
        employee.setEmployee_name(tenNV);
        ResultSet rs = employeeDao.load_execel(employee);

        if (rs == null) {
            JOptionPane.showMessageDialog(null, "Không có dữ liệu để xuất");
            return;
        }

        int rowIdx = 4;
        int stt = 1;
        while (rs.next()) {
            Row row = sheet.createRow(rowIdx++);

            int col = 0;

            // STT
            Cell cell = row.createCell(col++);
            cell.setCellValue(stt++);
            cell.setCellStyle(styleCell);

            // Mã NV
            cell = row.createCell(col++);
            cell.setCellValue(rs.getInt("employee_id"));
            cell.setCellStyle(styleCell);

            // Tên đăng nhập
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("employee_name"));
            cell.setCellStyle(styleCell);

            // Mật khẩu
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("password"));
            cell.setCellStyle(styleCell);

            // Họ tên
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("full_name"));
            cell.setCellStyle(styleCell);

            // Giới tính
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("sex"));
            cell.setCellStyle(styleCell);

            // Vai trò (chuyển từ số sang chuỗi)
            int roleId = rs.getInt("role");
            String roleName = mapRoleToName(roleId);
            cell = row.createCell(col++);
            cell.setCellValue(roleName);
            cell.setCellStyle(styleCell);

            // SĐT
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("phone"));
            cell.setCellStyle(styleCell);

            // Email
            cell = row.createCell(col++);
            cell.setCellValue(rs.getString("email"));
            cell.setCellStyle(styleCell);

            // Ngày
            String dateStr = rs.getDate("date") != null ? rs.getDate("date").toString() : "";
            cell = row.createCell(col++);
            cell.setCellValue(dateStr);
            cell.setCellStyle(styleCell);
        }

        // Tự động giãn cột
        for (int i = 0; i < headers.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Lưu file
        File f = new File("D:\\caheo\\Danhsachnhanvien.xlsx");
        try (FileOutputStream out = new FileOutputStream(f)) {
            workbook.write(out);
        }
        workbook.close();

        JOptionPane.showMessageDialog(null, "Xuất báo cáo thành công!");

        // Mở file
        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().open(f);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Lỗi khi xuất báo cáo: " + e.getMessage());
    }
}
}
