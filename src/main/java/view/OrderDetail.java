/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.OrderDAO;
import dao.ProductDAO;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author THIS PC
 */
public class OrderDetail extends javax.swing.JFrame {
private int orderId;
private javax.swing.JLabel lblOrderId;
private javax.swing.JLabel lblEmployee;
private javax.swing.JLabel lblDate;
private javax.swing.JLabel lblTotal;
private javax.swing.JLabel lblCustomer;
private javax.swing.JLabel lblPhone;
private boolean isEditing = false; // false = Thêm, true = Sửa
private int editingProductId = -1; // Lưu ID sản phẩm đang sửa


    /**
     * Creates new form OrderDetail
     */
    public OrderDetail() {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }
    public OrderDetail(int orderId) throws SQLException {
    initComponents();
    this.setLocationRelativeTo(null);
    this.orderId = orderId;
    loadProducts();
    loadOrderItems(orderId);
     // Load bảng sản phẩm 
     
    }
    
    private void disableFields() {
    cboTenSP.setEnabled(false);
    txtSL.setEditable(false);
    txtGia.setEditable(false);
    }
    
    private void clearFields() {
    cboTenSP.setSelectedIndex(0);
    txtSL.setText("");
    txtGia.setText("");
    }

    private void enableButtons() {
    btnThem.setEnabled(true);
    btnSua.setEnabled(true);
    btnXoa.setEnabled(true);
    btnLuu.setEnabled(true);
    btnBoQua.setEnabled(true);
    }
    
    private void disableButtons() {
    btnThem.setEnabled(false);
    btnSua.setEnabled(false);
    btnXoa.setEnabled(false);
    btnLuu.setEnabled(false);
    btnBoQua.setEnabled(false);
    }
    private void enableFields() {
    cboTenSP.setEnabled(true);
    txtSL.setEditable(true);
    txtGia.setEditable(true);
    }
    
    private void loadProducts() throws SQLException {
    ProductDAO dao = new ProductDAO();
    List<Object[]> products = dao.getAllProducts();

    cboTenSP.removeAllItems(); // Xóa dữ liệu cũ
    for (Object[] product : products) {
        cboTenSP.addItem(product[1].toString()); // Chỉ hiển thị tên sản phẩm
    }
}
    private void loadOrderItems(int orderId) {
    try {
        // Tạo model cho bảng
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho phép chỉnh sửa dữ liệu trong bảng
            }
        };

        // Đặt tên cột cho bảng
        model.setColumnIdentifiers(new String[] {
            "ID Sản Phẩm", "Tên Sản Phẩm", "Số Lượng", "Đơn Giá"
        });

        // Gọi dữ liệu từ OrderDAO theo orderId
        OrderDAO dao = new OrderDAO();
        List<Object[]> items = dao.getOrderItemsByOrderId(orderId);

        // Kiểm tra dữ liệu trước khi hiển thị
        System.out.println("Số lượng sản phẩm trong đơn hàng: " + items.size());
        for (Object[] item : items) {
            System.out.println(Arrays.toString(item)); // Kiểm tra dữ liệu trước khi addRow
            model.addRow(item); // Thêm từng dòng vào bảng
        }

        // Gán model vào jTable1
        jTable1.setModel(model);

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu chi tiết đơn hàng!");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTenSP = new javax.swing.JLabel();
        lblSL = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtSL = new javax.swing.JTextField();
        txtGia = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        cboTenSP = new javax.swing.JComboBox<>();
        btnXoa = new javax.swing.JButton();
        btnBoQua = new javax.swing.JButton();
        btnLuu = new javax.swing.JButton();
        btnXuat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtTenSP.setText("Tên sản phẩm:");

        lblSL.setText("Số lượng:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 153, 0));
        jLabel3.setText("Chi tiết đơn hàng");

        lb.setText("Giá: ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Đơn hàng", "Tên sản phẩm", "Số lượng", "Đơn giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSLActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        cboTenSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnBoQua.setText("Bỏ qua");
        btnBoQua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoQuaActionPerformed(evt);
            }
        });

        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        btnXuat.setText("Xuất Excel");
        btnXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnThem)
                        .addGap(39, 39, 39)
                        .addComponent(btnSua))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenSP)
                            .addComponent(lblSL))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboTenSP, 0, 166, Short.MAX_VALUE)
                            .addComponent(txtSL))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(lb, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnXoa)
                        .addGap(59, 59, 59)
                        .addComponent(btnLuu)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtGia, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                        .addGap(98, 98, 98))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBoQua)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(53, 53, 53)
                .addComponent(btnXuat)
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenSP)
                    .addComponent(lb)
                    .addComponent(txtGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSL)
                    .addComponent(txtSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnSua)
                    .addComponent(btnXoa)
                    .addComponent(btnBoQua)
                    .addComponent(btnLuu))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSLActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) { // Kiểm tra xem có dòng nào được chọn không
        String productName = jTable1.getValueAt(selectedRow, 1).toString(); // Cột 1: Tên SP
        int quantity = Integer.parseInt(jTable1.getValueAt(selectedRow, 2).toString()); // Cột 2: Số lượng
        double price = Double.parseDouble(jTable1.getValueAt(selectedRow, 3).toString()); // Cột 3: Đơn giá

        cboTenSP.setSelectedItem(productName);
        txtSL.setText(String.valueOf(quantity));
        txtGia.setText(String.valueOf(price));
    }

    }//GEN-LAST:event_jTable1MouseClicked

    private void btnBoQuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoQuaActionPerformed
        // TODO add your handling code here:
        clearFields();
        loadOrderItems(orderId);
    try {
        loadProducts();
    } catch (SQLException ex) {
        Logger.getLogger(OrderDetail.class.getName()).log(Level.SEVERE, null, ex);
    }
        disableFields();
        btnXoa.setEnabled(false);
        btnBoQua.setEnabled(false);
        btnLuu.setEnabled(false);
        btnSua.setEnabled(false);
    }//GEN-LAST:event_btnBoQuaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
         enableFields();
        clearFields(); 
        btnThem.setEnabled(false);
        btnXoa.setEnabled(false);
        btnSua.setEnabled(false);
        btnLuu.setEnabled(true);
        btnBoQua.setEnabled(true);
        isEditing = false; // đang thêm mới
    editingProductId = -1;


    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần sửa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    isEditing = true; // Đang sửa dữ liệu
    editingProductId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString()); // Lấy ID sản phẩm
    String productName = jTable1.getValueAt(selectedRow, 1).toString(); // Lấy tên sản phẩm từ bảng

    // Hiển thị dữ liệu lên form
    cboTenSP.setSelectedItem(productName);
    txtSL.setText(jTable1.getValueAt(selectedRow, 2).toString());
    txtGia.setText(jTable1.getValueAt(selectedRow, 3).toString());

    enableFields(); // Bật ô nhập liệu
    btnThem.setEnabled(false);
        btnXoa.setEnabled(false);
        btnSua.setEnabled(false);
        btnLuu.setEnabled(true);
        btnBoQua.setEnabled(true);

    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        // Kiểm tra dữ liệu đầu vào
    if (cboTenSP.getSelectedItem() == null || txtSL.getText().trim().isEmpty() || txtGia.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        String productName = cboTenSP.getSelectedItem().toString();
        int quantity = Integer.parseInt(txtSL.getText());
        double price = Double.parseDouble(txtGia.getText());

        OrderDAO orderDao = new OrderDAO();
        boolean success;

        if (isEditing) {
            // Nếu đang sửa, cập nhật sản phẩm
            success = orderDao.updateOrderDetail(orderId, editingProductId, quantity, price);
            JOptionPane.showMessageDialog(this, success ? "Cập nhật sản phẩm thành công!" : "Cập nhật sản phẩm thất bại!");
        } else {
            // Nếu đang thêm, thêm sản phẩm mới
            success = orderDao.addOrderDetailItem(orderId, productName, quantity, price);
            JOptionPane.showMessageDialog(this, success ? "Thêm sản phẩm thành công!" : "Thêm sản phẩm thất bại!");
        }

        if (success) {
            orderDao.updateTotalAmount(orderId);
            loadOrderItems(orderId); // Cập nhật lại danh sách sản phẩm
            disableFields(); // Khóa ô nhập liệu
            clearFields(); // Xóa dữ liệu
            enableButtons(); // Bật lại các nút
            isEditing = false; // Reset trạng thái về Thêm
            editingProductId = -1; // Xóa ID sản phẩm đang sửa
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
    }


    }//GEN-LAST:event_btnLuuActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int productId = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString()); // Lấy ID sản phẩm

    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa sản phẩm này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return; // Người dùng chọn "Không", dừng xử lý
    }

    try {
        OrderDAO orderDao = new OrderDAO();
        boolean success = orderDao.deleteOrderDetail(orderId, productId);

        if (success) {
            JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
            loadOrderItems(orderId); // Cập nhật lại danh sách sản phẩm
             clearFields();     // Xóa dữ liệu trên form
                orderDao.updateTotalAmount(orderId);
                btnThem.setEnabled(true);
                btnSua.setEnabled(false);
                btnXoa.setEnabled(false);
                btnLuu.setEnabled(false);
                btnBoQua.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Xóa sản phẩm thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi xóa sản phẩm!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnXoaActionPerformed
    
    public void exportOrderDetailsToExcel() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Chọn nơi lưu file Excel");
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();
        if (!filePath.endsWith(".xlsx")) {
            filePath += ".xlsx";
        }

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Chi tiết đơn hàng");

            TableModel model = jTable1.getModel();  // jTable1 là bảng chứa dữ liệu chi tiết đơn hàng

            // Style tiêu đề
            CellStyle headerStyle = workbook.createCellStyle();
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setColor(IndexedColors.WHITE.getIndex());
            headerStyle.setFont(headerFont);
            headerStyle.setFillForegroundColor(IndexedColors.DARK_GREEN.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setAlignment(HorizontalAlignment.CENTER);
            headerStyle.setBorderTop(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);

            // Header row
            Row headerRow = sheet.createRow(0);
            for (int col = 0; col < model.getColumnCount(); col++) {
                Cell cell = headerRow.createCell(col);
                cell.setCellValue(model.getColumnName(col));
                cell.setCellStyle(headerStyle);
            }

            // Ghi dữ liệu
            for (int row = 0; row < model.getRowCount(); row++) {
                Row excelRow = sheet.createRow(row + 1);
                for (int col = 0; col < model.getColumnCount(); col++) {
                    Cell cell = excelRow.createCell(col);
                    Object value = model.getValueAt(row, col);
                    cell.setCellValue(value != null ? value.toString() : "");
                }
            }

            for (int i = 0; i < model.getColumnCount(); i++) {
                sheet.autoSizeColumn(i);
            }

            try (FileOutputStream fileOut = new FileOutputStream(filePath)) {
                workbook.write(fileOut);
            }

            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().open(new File(filePath));
            }

            JOptionPane.showMessageDialog(this, "Xuất chi tiết đơn hàng thành công:\n" + filePath);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi xuất Excel: " + e.getMessage());
        }
    }
}

    
    private void btnXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatActionPerformed
        // TODO add your handling code here:
        exportOrderDetailsToExcel();
    }//GEN-LAST:event_btnXuatActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JFrame frame = new JFrame("Cửa sổ giữa màn hình");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         // hoặc dùng frame.pack() nếu bạn có layout sẵn
        frame.setLocationRelativeTo(null); // đặt ở giữa màn hình
        frame.setVisible(true);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderDetail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBoQua;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuat;
    private javax.swing.JComboBox<String> cboTenSP;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lb;
    private javax.swing.JLabel lblSL;
    private javax.swing.JTextField txtGia;
    private javax.swing.JTextField txtSL;
    private javax.swing.JLabel txtTenSP;
    // End of variables declaration//GEN-END:variables
}
